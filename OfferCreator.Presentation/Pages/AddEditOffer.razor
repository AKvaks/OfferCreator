@page "/add-edit-offer/{id:int?}"
@using OfferCreator.Core.Models.DTOs.Offers
@using OfferCreator.Core.Models.DTOs.OfferItems
@using OfferCreator.Presentation.Components
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>@(Id != null ? "Edit Offer" : "Add Offer")</PageTitle>

<div class="page-title">
    <h1>@(Id != null ? "Edit Offer" : "Add Offer")</h1>
    <button class="btn btn-primary" type="button" @onclick="BackToOffers">
        Back
    </button>
</div>
<br />
<div>
    <label>Offer No.: </label>
    <span>@(Id != null ? offer.OfferNumber : "N/A")</span>
</div>
<div>
    <label>Date of offer: </label>
    <span>@(Id != null ? offer.DateOfOffer : DateTime.UtcNow.ToShortDateString())</span>
</div>
<hr />
<div class="page-title">
    <h2>Offer Items:</h2>
    <button class="btn btn-success" type="button" @onclick="AddOfferItem">
        <i class="fa-solid fa-plus"></i> Offer
    </button>
</div>
@if (offer.OfferItems is not null)
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Article</th>
                    <th>Price per Item</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var offerItem in offer.OfferItems)
                {
                    <tr>
                        <td>@offerItem.ArticleName</td>
                        <td>@offerItem.PricePerItem</td>
                        <td>@offerItem.Quantity</td>
                        <td>@offerItem.TotalPrice</td>
                        <td>
                            <button class="btn btn-success" type="button" @onclick="() => EditOfferItem(offerItem)">
                                <i class="fa-solid fa-gear"></i>
                            </button>
                            <button class="btn btn-danger" type="button" @onclick="() => DeleteOfferItem(offerItem)">
                                <i class="fa-solid fa-trash" />
                            </button>
                        </td>
                    </tr>
                }
                <tr>
                    <td></td>
                    <td></td>
                    <td>SUM:</td>
                    <td>@offer.OfferItems.Sum(x => x.TotalPrice)</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;

    public OfferAddEditModel offer = new OfferAddEditModel();

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var response = await Http.GetFromJsonAsync<OfferAddEditModel>(GetOfferForEditUrl());
            if (response is not null)
            {
                offer = response;
                btnText = "Save changes";
            }
            else
            {
                btnText = "Save";
            }
        }
        else
        {
            btnText = "Save";
        }
    }

    private async void AddOfferItem()
    {
        var parameters = new ModalParameters();
        parameters.Add("Offer Item", new OfferItemModel());

        var modal = Modal.Show<AddEditOfferItem>("Add Offer Item", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newOfferItem = (OfferItemModel)result.Data;
            offer.OfferItems?.Add(newOfferItem);
            StateHasChanged();
        }
    }

    private async void EditOfferItem(OfferItemModel OfferItem)
    {
        var parameters = new ModalParameters();
        parameters.Add("Offer Item", OfferItem);

        var modal = Modal.Show<AddEditOfferItem>("Add Offer Item", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newOfferItem = (OfferItemModel)result.Data;
            offer.OfferItems?.Add(newOfferItem);
            StateHasChanged();
        }
    }

    private void DeleteOfferItem(OfferItemModel offerItemToDelete)
    {
        var removeAtIndex = offer.OfferItems?.IndexOf(offerItemToDelete);
        if (removeAtIndex != null && removeAtIndex != -1)
        {
            offer.OfferItemsIdsToDelete?.Add(offerItemToDelete.Id);
            offer.OfferItems?.RemoveAt(removeAtIndex.Value);
            StateHasChanged();
        }
    }

    private void BackToOffers()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetOfferForEditUrl()
    {
        return $"api/offer/GetOfferForEditById/{Id}";
    }
}
