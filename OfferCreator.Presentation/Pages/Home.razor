@page "/"
@using OfferCreator.Core.Models
@using OfferCreator.Core.Models.DTOs.Offers
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Offers</PageTitle>

<div class="page-title">
    <h1>Offers</h1>
    <button class="btn btn-primary" type="button" @onclick="AddOffer">
        <i class="fa-solid fa-plus"></i>
        Offer
    </button>
</div>
<br />
@if (pagedOffers is null)
{
    <p class="loading-progress-text">Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Offer Number</th>
                    <th>Date of Offer</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var offer in pagedOffers.Items)
                {
                    <tr>
                        <td @onclick="() => OnOfferNumberClick(offer.Id)">@offer.OfferNumber</td>
                        <td>@offer.DateOfOffer</td>
                        <td>
                            <button class="btn btn-success" type="button" @onclick="() => ShowOfferDetails(offer.Id)">
                                <i class="fa-solid fa-magnifying-glass"></i>
                            </button>
                            <button class="btn btn-danger" type="button" @onclick="() => DeleteOffer(offer.Id)">
                                <i class="fa-solid fa-trash" />
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="table-buttons">
        <button class="btn btn-primary" type="button" @onclick="PreviousAsync" disabled="@(!pagedOffers.HasPreviousPage)">Previous</button>
        <span>@pagedOffers.PageNumber / @pagedOffers.TotalPages</span>
        <button class="btn btn-primary" type="button" @onclick="NextAsync" disabled="@(!pagedOffers.HasNextPage)">Next</button>
    </div>
}

@code {
    private PagedResponse<OfferListModel>? pagedOffers;

    private int pageNumber = 1;
    private const int pageSize = 3;

    protected override async Task OnInitializedAsync()
    {
        pagedOffers = await Http.GetFromJsonAsync<PagedResponse<OfferListModel>>(GetAllOffersPagedURL(pageNumber));
    }

    private async Task PreviousAsync()
    {
        if (pageNumber - 1 > 0)
        {
            pageNumber--;
            await OnPageNumberChange();
        }
    }

    private async Task NextAsync()
    {
        if (pageNumber + 1 <= pagedOffers?.TotalPages)
        {
            pageNumber++;
            await OnPageNumberChange();
        }
    }

    private async Task OnPageNumberChange()
    {
        pagedOffers = await Http.GetFromJsonAsync<PagedResponse<OfferListModel>>(GetAllOffersPagedURL(pageNumber));
        StateHasChanged();
    }

    private string GetAllOffersPagedURL(int pageNumber)
    {
        return "api/offer/GetAllOffersPaginated?pageNumber=" + $"{pageNumber}" + $"&pageSize={pageSize}";
    }

    private void ShowOfferDetails(int offerId)
    {
        NavigationManager.NavigateTo($"/offer-details/{offerId}");
    }

    private async Task DeleteOffer(int offerId)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"/api/offer/DeleteOfferById/{offerId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Delete successful");
            pageNumber = 1;
            pagedOffers = await Http.GetFromJsonAsync<PagedResponse<OfferListModel>>(GetAllOffersPagedURL(pageNumber));
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Delete failed with status code {response.StatusCode}");
        }
    }


    private void OnOfferNumberClick(int offerId)
    {
        NavigationManager.NavigateTo($"/add-edit-offer/{offerId}");
    }

    private void AddOffer()
    {
        NavigationManager.NavigateTo($"/add-edit-offer");
    }
}

